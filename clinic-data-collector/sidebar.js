// Sidebar script –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º YandexParser Analytics
let sessionStartTime = null;
let timerInterval = null;

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const statusDiv = document.getElementById('status');
const statusText = document.getElementById('statusText');
const statusDetails = document.getElementById('statusDetails');
const progressBar = document.getElementById('progressBar');
const progressFill = document.getElementById('progressFill');
const statsDiv = document.getElementById('stats');
const collectedCount = document.getElementById('collectedCount');
const sessionTime = document.getElementById('sessionTime');

const startBtn = document.getElementById('startBtn');
const stopBtn = document.getElementById('stopBtn');
const autoScrollBtn = document.getElementById('autoScrollBtn');
const stopScrollBtn = document.getElementById('stopScrollBtn');
const exportBtn = document.getElementById('exportBtn');
const clearBtn = document.getElementById('clearBtn');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–∞
const limitInput = document.getElementById('limitInput');

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const advancedToggle = document.getElementById('advancedToggle');
const advancedContent = document.getElementById('advancedContent');
const scrollSpeedInput = document.getElementById('scrollSpeed');
const maxScrollsInput = document.getElementById('maxScrolls');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ sidebar
document.addEventListener('DOMContentLoaded', function() {
  updateStatus();
  loadSettings();
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
  startBtn.addEventListener('click', startCollection);
  stopBtn.addEventListener('click', stopCollection);
  autoScrollBtn.addEventListener('click', startAutoScroll);
  stopScrollBtn.addEventListener('click', stopAutoScroll);
  exportBtn.addEventListener('click', exportData);
  clearBtn.addEventListener('click', clearData);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∏–º–∏—Ç–∞
  limitInput.addEventListener('input', validateAndSetLimit);
  limitInput.addEventListener('blur', validateAndSetLimit);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  advancedToggle.addEventListener('click', toggleAdvancedSettings);
  scrollSpeedInput.addEventListener('change', saveAdvancedSettings);
  maxScrollsInput.addEventListener('change', saveAdvancedSettings);
  
  // –û—Ç–∫—Ä—ã—Ç–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∏–∫–æ–Ω–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  if (chrome.sidePanel) {
    chrome.action.onClicked.addListener((tab) => {
      chrome.sidePanel.open({ tabId: tab.id });
    });
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
function loadSettings() {
  chrome.runtime.sendMessage({action: 'getCollectionLimit'}, (response) => {
    if (response && response.limit) {
      limitInput.value = response.limit;
    }
  });
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  chrome.storage.local.get(['scrollSpeed', 'maxScrolls'], (result) => {
    if (result.scrollSpeed) scrollSpeedInput.value = result.scrollSpeed;
    if (result.maxScrolls) maxScrollsInput.value = result.maxScrolls;
  });
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞
function validateAndSetLimit() {
  let value = parseInt(limitInput.value);
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è - —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  if (isNaN(value) || value < 1) {
    value = 1;
    limitInput.value = 1;
    showNotification('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç: 1 –∫–∞—Ä—Ç–æ—á–∫–∞', 'error');
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç
  chrome.runtime.sendMessage({action: 'setCollectionLimit', limit: value}, (response) => {
    if (response && response.status === 'updated') {
      showNotification(`–õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${formatNumber(value)} –∫–∞—Ä—Ç–æ—á–µ–∫`, 'success');
    }
  });
}


// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
function toggleAdvancedSettings() {
  const isVisible = advancedContent.classList.contains('show');
  advancedContent.classList.toggle('show');
  advancedToggle.textContent = isVisible ? '‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' : 'üîß –°–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏';
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
function saveAdvancedSettings() {
  const settings = {
    scrollSpeed: parseFloat(scrollSpeedInput.value),
    maxScrolls: parseInt(maxScrollsInput.value)
  };
  
  chrome.storage.local.set(settings, () => {
    showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
  });
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function updateStatus() {
  Promise.all([
    new Promise(resolve => chrome.runtime.sendMessage({action: 'getCollectedData'}, resolve)),
    new Promise(resolve => chrome.runtime.sendMessage({action: 'getCollectionLimit'}, resolve))
  ]).then(([dataResponse, limitResponse]) => {
    if (dataResponse && limitResponse) {
      const dataCount = dataResponse.data ? dataResponse.data.length : 0;
      const isCollecting = dataResponse.isCollecting;
      const limit = limitResponse.limit || 500;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å –ª–∏–º–∏—Ç–æ–º
      collectedCount.textContent = formatNumber(dataCount);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
      const progress = Math.min((dataCount / limit) * 100, 100);
      progressFill.style.width = progress + '%';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
      const limitReached = dataCount >= limit;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      if (isCollecting && !limitReached) {
        statusDiv.className = 'status collecting';
        statusText.textContent = 'üîÑ –ò–¥–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...';
        statusDetails.innerHTML = `–°–æ–±—Ä–∞–Ω–æ: <strong>${formatNumber(dataCount)}/${formatNumber(limit)}</strong> –∫–∞—Ä—Ç–æ—á–µ–∫<br>–û–±–Ω–æ–≤–ª—è–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏`;
        progressBar.style.display = 'block';
        
        startBtn.style.display = 'none';
        stopBtn.style.display = 'block';
        statsDiv.style.display = 'grid';
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
        if (!timerInterval) {
          sessionStartTime = Date.now();
          startTimer();
        }
      } else {
        statusDiv.className = limitReached ? 'status completed' : 'status';
        
        if (limitReached) {
          statusText.textContent = 'üéØ –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!';
          statusDetails.innerHTML = `–°–æ–±—Ä–∞–Ω–æ <strong>${formatNumber(dataCount)}</strong> –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ <strong>${formatNumber(limit)}</strong><br>–ì–æ—Ç–æ–≤–æ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–Ω—ã—Ö`;
          progressBar.style.display = 'block';
        } else if (dataCount > 0) {
          statusText.textContent = '‚úÖ –°–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω';
          statusDetails.innerHTML = `–°–æ–±—Ä–∞–Ω–æ <strong>${formatNumber(dataCount)}</strong> –∫–∞—Ä—Ç–æ—á–µ–∫<br>–ì–æ—Ç–æ–≤–æ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–Ω—ã—Ö`;
          progressBar.style.display = 'block';
        } else {
          statusText.textContent = '‚ö° –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ';
          statusDetails.innerHTML = `–õ–∏–º–∏—Ç: <strong>${formatNumber(limit)}</strong> –∫–∞—Ä—Ç–æ—á–µ–∫<br>–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å —Å–±–æ—Ä"`;
          progressBar.style.display = 'none';
        }
        
        startBtn.style.display = 'block';
        stopBtn.style.display = 'none';
        
        if (dataCount > 0) {
          statsDiv.style.display = 'grid';
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        if (timerInterval) {
          clearInterval(timerInterval);
          timerInterval = null;
        }
      }
      
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
      exportBtn.disabled = dataCount === 0;
      exportBtn.innerHTML = dataCount > 0 
        ? `üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å (${formatNumber(dataCount)} –∫–∞—Ä—Ç–æ—á–µ–∫)`
        : 'üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ';
    }
  });
}

// –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞
function startCollection() {
  chrome.runtime.sendMessage({action: 'startCollection'}, (response) => {
    if (response && response.status === 'started') {
      sessionStartTime = Date.now();
      startTimer();
      updateStatus();
      
      showNotification('üöÄ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω!', 'success');
    }
  });
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±–æ—Ä–∞
function stopCollection() {
  chrome.runtime.sendMessage({action: 'stopCollection'}, (response) => {
    if (response) {
      updateStatus();
      showNotification(`‚èπÔ∏è –°–±–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –°–æ–±—Ä–∞–Ω–æ ${formatNumber(response.dataCount)} –∫–∞—Ä—Ç–æ—á–µ–∫.`, 'info');
    }
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
function exportData() {
  chrome.runtime.sendMessage({action: 'exportData'}, (response) => {
    if (response && response.status === 'exported') {
      showNotification('üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–ø–∫—É –∑–∞–≥—Ä—É–∑–æ–∫!', 'success');
    }
  });
}

// –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function clearData() {
  if (confirm('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
    chrome.runtime.sendMessage({action: 'clearData'}, (response) => {
      if (response && response.status === 'cleared') {
        updateStatus();
        showNotification('üóëÔ∏è –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', 'info');
      }
    });
  }
}

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
function startAutoScroll() {
  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
  chrome.storage.local.get(['scrollSpeed', 'maxScrolls'], (settings) => {
    const scrollSpeed = settings.scrollSpeed || 3;
    const maxScrolls = settings.maxScrolls || 50;
    
    chrome.runtime.sendMessage({
      action: 'startAutoScroll',
      scrollSpeed: scrollSpeed,
      maxScrolls: maxScrolls
    }, (response) => {
      if (response && response.status === 'started') {
        autoScrollBtn.style.display = 'none';
        stopScrollBtn.style.display = 'block';
        showNotification(`üìú –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! (${scrollSpeed}—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª)`, 'success');
        updateAutoScrollStatus();
      }
    });
  });
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
function stopAutoScroll() {
  chrome.runtime.sendMessage({action: 'stopAutoScroll'}, (response) => {
    if (response && response.status === 'stopped') {
      autoScrollBtn.style.display = 'block';
      stopScrollBtn.style.display = 'none';
      showNotification('‚èπÔ∏è –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', 'info');
      updateAutoScrollStatus();
    }
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
function updateAutoScrollStatus() {
  chrome.runtime.sendMessage({action: 'getAutoScrollStatus'}, (response) => {
    if (response && response.status) {
      const status = response.status;
      if (status.isScrolling) {
        autoScrollBtn.style.display = 'none';
        stopScrollBtn.style.display = 'block';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –≤ —Å—Ç–∞—Ç—É—Å
        const currentDetails = statusDetails.innerHTML;
        if (!currentDetails.includes('–ü—Ä–æ–∫—Ä—É—Ç–∫–∞:')) {
          statusDetails.innerHTML += `<br><small>üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞: ${status.scrollCount}, –≠–ª–µ–º–µ–Ω—Ç–æ–≤: ${status.itemCount}</small>`;
        }
      } else {
        autoScrollBtn.style.display = 'block';
        stopScrollBtn.style.display = 'none';
      }
    }
  });
}

// –¢–∞–π–º–µ—Ä —Å–µ—Å—Å–∏–∏
function startTimer() {
  timerInterval = setInterval(() => {
    if (sessionStartTime) {
      const elapsed = Date.now() - sessionStartTime;
      const minutes = Math.floor(elapsed / 60000);
      const seconds = Math.floor((elapsed % 60000) / 1000);
      sessionTime.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }
  }, 1000);
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
  const notification = document.createElement('div');
  notification.style.cssText = `
    position: fixed;
    top: 20px;
    right: 20px;
    padding: 15px 20px;
    border-radius: 8px;
    color: white;
    font-size: 13px;
    font-weight: 600;
    z-index: 10000;
    animation: slideIn 0.3s ease-out;
    max-width: 300px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.3);
  `;
  
  switch (type) {
    case 'success':
      notification.style.background = 'linear-gradient(135deg, #34a853, #4caf50)';
      break;
    case 'error':
      notification.style.background = 'linear-gradient(135deg, #ea4335, #f44336)';
      break;
    default:
      notification.style.background = 'linear-gradient(135deg, #1a73e8, #4285f4)';
  }
  
  notification.innerHTML = message;
  document.body.appendChild(notification);
  
  // –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏—é
  const style = document.createElement('style');
  style.textContent = `
    @keyframes slideIn {
      from { transform: translateX(100%); opacity: 0; }
      to { transform: translateX(0); opacity: 1; }
    }
  `;
  document.head.appendChild(style);
  
  // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    if (notification.parentNode) {
      notification.style.animation = 'slideOut 0.3s ease-in forwards';
      setTimeout(() => notification.remove(), 300);
    }
  }, 4000);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
  const slideOutStyle = document.createElement('style');
  slideOutStyle.textContent = `
    @keyframes slideOut {
      from { transform: translateX(0); opacity: 1; }
      to { transform: translateX(100%); opacity: 0; }
    }
  `;
  document.head.appendChild(slideOutStyle);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
function formatNumber(num) {
  if (num >= 1000) {
    return (num / 1000).toFixed(num % 1000 === 0 ? 0 : 1) + 'K';
  }
  return num.toString();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã (—Ä–µ–∂–µ —á–µ–º –≤ popup)
setInterval(() => {
  updateStatus();
  updateAutoScrollStatus();
}, 3000);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∏–∫–æ–Ω–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è sidebar
if (chrome.action) {
  chrome.action.onClicked.addListener((tab) => {
    chrome.sidePanel.open({ tabId: tab.id });
  });
}
